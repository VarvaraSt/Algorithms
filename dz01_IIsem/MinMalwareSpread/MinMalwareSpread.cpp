#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

class Solution {
public:
	void dfs(vector<vector<int>>& graph, vector<int>& v, int i, int color)
	{
		v[i] = color;
		for (int j = 0; j < graph.size(); j++) {
			if (graph[i][j] == 1 && v[j] == -1) {
				dfs(graph, v, j, color);
			}
		}
	}
	
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int n = graph.size();
		int m = initial.size();
		int min = n;
		vector<int> v(n, -1);
		set<int> initialSet;
		for(int i = 0; i < m; i++)
		{
			initialSet.insert(initial[i]);
		}

		for (int i = 0; i < m; i++) {
			if (initial[i] < min) min = initial[i];
			if (v[initial[i]] == -1) {
				dfs(graph, v, initial[i], initial[i]);
			}
			else
			{
				initialSet.erase(initial[i]);
				initialSet.erase(v[initial[i]]);
			}
		}
		if (initialSet.empty()) {
			return min;
		}
		vector<int> sum(n);
		for (int i = 0; i < n; i++)
		{
			if (v[i] != -1)
				sum[v[i]]++;
		}
		int ans = 0;
		int max = 0;
		for (int i = 0; i < m; i++)
		{
			if (sum[initial[i]] >= max && initialSet.count(initial[i]))
			{
				if (sum[initial[i]] == max && initial[i] < ans) ans = initial[i];
				else if (sum[initial[i]] > max) {
					max = sum[initial[i]];
					ans = initial[i];
				}
			}
		}
		return ans;
    }
};;

int main()
{
    int n;
    cin >> n;
    vector<vector<int>> graph(n);
	for (int i = 0; i < n; i++)
	{
        graph[i] = vector<int>(n);
		for (int j = 0; j < n; j++)
		{
			cin >> graph[i][j];
		}
	}

	int m;
	cin >> m;
	vector<int> initial(m);
	for (int i = 0; i < m; i++)
	{
		cin >> initial[i];
	}
	cout << Solution().minMalwareSpread(graph, initial);
}
