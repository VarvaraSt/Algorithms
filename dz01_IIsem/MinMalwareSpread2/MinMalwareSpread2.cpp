#include <algorithm>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

class Solution {
public:
	void dfs(vector<vector<int>>& graph, vector<int>& v, vector<int>& notInitial, vector<int>& been, int i, int color)
	{
		for (int j = 0; j < graph.size(); j++) {
			if (graph[i][j] == 1 && notInitial[j] && i != j && !been[j]) {
				if (v[j] == -1)
					v[j] = color;
				else if (v[j] != color) v[j] = graph.size();
				been[j] = 1;
				dfs(graph, v, notInitial, been, j, color);
			}
		}
	}

	int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
		int n = graph.size();
		int m = initial.size();
		int min = n;
		vector<int> v(n, -1);
		vector<int> notInitial(n, 1);
		for (int i = 0; i < m; i++)
		{
			if (initial[i] < min) min = initial[i];
			notInitial[initial[i]] = 0;
		}

		for (int i = 0; i < m; i++) {
			vector<int> been(n, 0);
			dfs(graph, v, notInitial, been, initial[i], initial[i]);
		}

		vector<int> sum(n);
		for (int i = 0; i < n; i++)
		{
			if (v[i] != -1 && v[i] != n)
			{
				sum[v[i]]++;
			}
		}

		int max = 0;
		int ans = min;
		for (int i = 0; i < m; i++)
		{
			int j = initial[i];
			if (sum[j] > max || (sum[j] == max && j < ans))
			{
				max = sum[j];
				ans = j;
			}
		}

		return ans;
	}
};;

int main()
{
	int n;
	cin >> n;
	vector<vector<int>> graph(n);
	for (int i = 0; i < n; i++)
	{
		graph[i] = vector<int>(n);
		for (int j = 0; j < n; j++)
		{
			cin >> graph[i][j];
		}
	}

	int m;
	cin >> m;
	vector<int> initial(m);
	for (int i = 0; i < m; i++)
	{
		cin >> initial[i];
	}
	cout << Solution().minMalwareSpread(graph, initial);
}
